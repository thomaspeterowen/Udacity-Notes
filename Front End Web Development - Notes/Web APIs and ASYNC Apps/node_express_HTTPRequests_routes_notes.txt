
--- node.js ---

open source, cross platform, js server environment
allows you to execute code outside and inside of browser

allows persistance - to maintain created data across visits from webpage

allows install packages, dependencies for projects etc. easily and from command line.


--- NVM ---

node version manager
e.g. nvm-windows

you can install various versions and switch easily between the versions

https://www.mend.io/free-developer-tools/blog/how-to-update-node-js-to-latest-version/

https://github.com/coreybutler/nvm-windows/releases

run commands from cmd as administrator(!!)

nvm install xxxx
	e.g. nvm install 12.18.3

nvm use xxxx
	e.g. nvm use 12.18.3
	
nvm install latest
nvm list
nvm list available


--- NPM ---

node packet manager
node come pre-installed with a standard packet manager called npm

used to download and manage dependencies of node.js packages
now also used for front end js

a package in node.js contains all files needed for a module

modules are js libraries you can include in your project

npm install package-name
	npm install body-parser
	npm install cors
	
need to create additional file server.js
package included and made available with const bodyParser = require('body-parser')

--- express ---

npm install express

// Express to run server and routes
const express = require('express');

// Start up an instance of app
const app = express();

e.g. how to connect body-parser and cor to the app instance
	/* Dependencies */
	const bodyParser = require('body-parser')
	/* Middleware*/
	//Here we are configuring express to use body-parser as middle-ware.
	app.use(bodyParser.urlencoded({ extended: false }));
	app.use(bodyParser.json());
	// Cors for cross origin allowance
	const cors = require('cors');
	app.use(cors());

--- local (express) server ---

receive requests -> processes them -> returns response

	const port = 8000;
	const server = app.listen(port, listening);

	function listening() {
		console.log("server running");
		console.log(`running on localhost: ${port}`);
	)
	
then run "node filename.js" to start server

server side websites have a somewhat different structure

starting point is this line of code (written in server.js):
	app.use(express.static('website'));

meaning we link out server side code (server.js) to our client side code (contents of website folder)

--- arrow funtion ---

Regular Function

	function addition(number){ return 4 + number }

	addition(4); `

Arrow Function (much more compact)

	const addition = number => 4 + number

	addition(4);

--- SUMMARY ---

Server-side: refers to operations performed by the server in a network. In web dev, we used Server-side scripting to employ scripts on a web server that produces a response for each user's request.
Client-side: refers to operations performed at the client or user's end.
Package: a file or directory defined by a package.json. The npm registry contains many packages which are node modules or include node modules.
Module: file or directory in the node_modules directory that can be loaded by the Node.js require() function is known as a module.
Arrow function: is a compact alternative to a traditional function expression

--- HTTP Requests & Routes ---

-- GET Requests

to get data from the server

var express = require('express');
var app = express();

// respond with "hello world" when a GET request is made to the homepage
app.get('/', function (req, res) {
  res.send('hello world');
})

when URL is visited, GET request made to server, response shown in browser, the words 'hello world' would appear on the screen.

req = request
res = response

var express = require('express')
var app = express()
// Create JS object
const appData = {}
// Respond with JS object when a GET request is made to the homepage
app.get('/all', function (req, res) {
  res.send(appData)
})

when /all URL is visited, GET request made to server, response shown in browser, variable appData would appear on the screen.

-- POST Requests

to send data to the server

// POST method route
app.post('/', function (req, res) {
  res.send('POST received')
})

- post route in server side code

const data = []
app.post('/addMovie', addMovie)

function addMovie (req, res){
   console.log(req.body)
   data.push(req.body)
}

--- CLIENT VS SERVER SIDE CODE ---

server
	set up in the beginning to handle anything outside what browsers download e.g. saving user data while using website
client
	code that browser executes
	the finished product that users see
	
--- post request from client side script ---

const postData = async ( url = '', data = {})=>{
    console.log(data);
      const response = await fetch(url, {
      method: 'POST', 
      credentials: 'same-origin',
      headers: {
          'Content-Type': 'application/json',
      },
     // Body data type must match "Content-Type" header        
      body: JSON.stringify(data), 
    });

      try {
        const newData = await response.json();
        console.log(newData);
        return newData;
      }catch(error) {
      console.log("error", error);
      }
  }

postData('/add', {answer:42});
postData('/addAnimal', {animal:'Tiger'});

-- processing the POST request

if the data from POST request was {intelligence:100}

let data = request.body;
projectData["intelligence"]= data.intelligence;
	
--

if the data from POST request was {animal:"elephant", score: 10},{animal:"kangaroo",score:3}

let newData = request.body;
let newEntry = {
	animal: newData.animal,
	score: newData.score
}	
data.push(newEntry)

--

if the data from POST request was {answer:42}

projectData.push(request.body);
	
--

HTTP Request: an action to be performed on a resource identified by a given request-url. GET, POST, PUT, DELETE, etc.
GET: an HTTP request method used to request data from a specified resource.
POST: an HTTP request method that requests the webserver to accept the data enclosed in the body of the request message.
	
	
	