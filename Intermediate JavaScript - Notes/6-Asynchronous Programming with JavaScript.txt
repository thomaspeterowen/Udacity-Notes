
--- Introduction to Asynchronous Programming ---

where is async needed:
	APIs
	external processes
	long running processes (e.g. reading file, uploading)
	writing more efficiently, utilizing CPU
	
synchronous: action A must complete before B can start
asynchronous: as soon as A is idle, the program starts action B

why learn:
	1. JS is async by default for I/O and DOM manipulations
	2. skill required of a professional developer
	3. only going to get more important
	4. concepts are shared across most modern programming languages


--- Sync concepts and async callbacks ---

	-Synchronous-					-Asynchronous-

	doesn't try to be efficient		more efficient

	will not move on				more complicated
	even when waiting


threads

	how computers do the work
	
	JS is single-threaded, we have to learn how to use this one thread as efficiently as possible
	
	synchronous programs don't try to use the thread efficiently

	asynchronous programs use clever methods and syntax to their advantage 
	with a goal of getting as much usefulness out of the single thread as possible!


blocking vs non-blocking

	blocking refers to a task that stops all work on the thread until it is complete
	non-blocking task allows the program to go on with other tasks while waiting for something to finish

	synchronous programs use blocking code
	asynchronous programs use non-blocking code when it is beneficial

	writing non-blocking code (asynchronous programs), we can reduce inefficiencies and make better use of the computing power available to us!


javascript is a "single threaded programming language with asynchronous non-blocking I/O"

	-> internal APIs in JS are actually requests to the JS browser API, these tasks take place on another thread!!

	-> javaScript moves I/O operations to a new thread via an internal API

---

Examples using non-blocking functionality

- ONE -

	const logB = () => {
		console.log("B")
	}

	const logC = () => {
		console.log("C")
		console.log("D")
	}

	console.log("A")
	setTimeout(logB, 2000);
	setTimeout(logC, 3000);

- TWO -

	const quote = "The art of programming is the skill of controlling complexity.";
	const reference = "-- Marijn Haverbeke, Eloquent JavaScript";


	const printWordClosure = () => {
		let index = 0

		return (quotation) => {
			console.log(quotation[index])
			if (index === quotation.length-1) {
				clearInterval(quoteInterval)
				console.log(reference)
			}
			index++
		}
	}

	const quoteInterval = setInterval(printWordClosure(), 1000, quote.split(' '));

---

Asynchronous
	Refers to the management of a single thread that can move past tasks that are waiting to complete the rest of the program. Synonymous with non-blocking.
	
Parallel
	Running two processes on two separate threads simultaneously

Concurrent
	Achieving the appearance of simultaneous computation by switching between tasks on an active thread

---

Sequencing Events with Callbacks

	callbacks: the vehicle for our asynchronous tasks to rejoin the main thread
	
	passing functions as callbacks allows us to schedule reactions to asynchronous events without having to know how long the asynchronous event will take
	

Chaining

	flattening a callback chain might make it easier to read, but it will be more code
	
	the cleanest way to write the callback chain will depend on how much logic is happening in each step, and your personal preference
	
	it is always cleaner to move repeated steps, or long sets of steps, out into an external function


nested vs flat

	// nested
	const mockAPI = (returnValue) => (arg, cb) => {
		setTimeout(() => cb(returnValue), 2000)
	}

	const fetchSession = mockAPI({ id: "123765" })
	const fetchUser = mockAPI({ firstname: "Bob" })
	const fetchUserFavorites = mockAPI([ "lions", "tigers", "bears" ])

	const runCallbacks = () => {
		fetchSession("session-id", (session) => {
			fetchUser(session, (user) => {
				fetchUserFavorites(user, (favorites) => {
					console.log(favorites)
				})
			})
		})
	}

	// flat
	const runCallbacksFlat = () => {
		const handleFavorites = (favorites) => {
			console.log(favorites)
		}
		
		const handleUser = (user) => {
			fetchUserFavorites(user, handleFavorites)
		}

		const handleSession = (session) => {
			fetchUser(session, handleUser)
		}

		fetchSession("session-id", handleSession)
	}

Flattening a callback chain might make it easier to read, but it will be more code
The cleanest way to write the callback chain will depend on how much logic is happening in each step, and your personal preference
It is always cleaner to move repeated steps, or long sets of steps, out into an external function

---

Error Handling in Callbacks Code

	const mockAPI = (returnValue) => (arg, success, failure) => {
		setTimeout(() => success(returnValue), 2000)
	}
	
	/*
	const mockAPI = (returnValue) => (arg, success, failure) => {
		setTimeout(() => failure("Request Failed"), 2000)
	}*/

	const fetchSession = mockAPI({ id: "123765" })
	const fetchUser = mockAPI({ firstname: "Bob" })
	const fetchUserFavorites = mockAPI([ "lions", "tigers", "bears" ])
	const handleError = error => {
		// you can put more custom logic here
		console.log(error)
	}

	const runCallbacks = () => {
		fetchSession("session-id", session => {
			fetchUser(session, (user) => {
				fetchUserFavorites(user, (favorites) => {
					console.log(favorites)
				}, handleError)
			}, handleError)
		}, handleError)
	}

	runCallbacks();

The function to handle errors is passed as an argument in the same way we pass a function to handle a response with data
Each step in the chain will have its own error handling
It is cleaner (especially if needed to do more than console log) to move the error handling out into an external function

---

Cons of Callbacks

	Callback Hell
	
		Callback chains were notorious in the JavaScript community as being hairy to read and risky to change.
		
		Long chains of callbacks end up in this increasingly indented spiral, which is commonly referred to as Callback Hell.
		
		In vanilla JavaScript there was no way to clean up this syntax or make it easier to deal with asynchronous event chains, 
		but asynchronous flows are essential to JavaScript functionality, so there was no option but to put up with them -- until es2015.

Exercise 1

	// three problems have been fixed to get the console.log message: 
	// "Well done! { points: [ 45938, 1314 ], type: '3K8B' }"

	const dataJson = {
		response: {
			timeElapsed: 45938,
			distanceTotal: 1314,
			variant: "3K8B"
		}
	}

	const useValues = (parsedData) => { // pretend we're using these
		console.log("Well done!", parsedData)
	}

	// cb is a common naming choice for a callback argument
	const parseResponse = (data, cb) => {
		const {response} = data;
		const parsed = {
			points: [
				response.timeElapsed, response.distanceTotal
			],
			type: response.variant
		}
		cb(parsed)
	}

	const handleResponse = (json) => {
		let data = JSON.parse(json)
		parseResponse(data, useValues)
	}

	const getData = () => { // Mock API call
		setTimeout(handleResponse, 1000, JSON.stringify(dataJson));
	} 

	getData()

Exercise 2

	// 1. Generates a random number
	// 2. Waits three seconds, then adds 5 to the random number
	// 3. Every two seconds, adds 2 to the random number for a total of 6 seconds
	// 4. Subtracts 3
	// 5. Waits four seconds, and logs the resulting number

	const wait4 = secret_num => { 
		setTimeout(console.log, 4000, secret_num)
	}

	const interval2 = (rand, cb) => {
		let sum = rand;
		const add1 = () => {
			
			sum = sum + 2;

			if ( sum-rand >= 6) {
				clearInterval(byTwo);
				cb(sum-3);
			}
		}
		const byTwo = setInterval(add1, 2000)
	}

	const add5 = (rand, cb, cb2 ) => {
		cb(rand+5, cb2);
	}

	const generateRandomNumber = () => { 
		const rand = Math.round(Math.random() * 10);
		setTimeout(add5, 3000, rand, interval2, wait4);
	} 

	generateRandomNumber()

---

Callbacks in asynchronous functions serve the purpose of handling the result of the asynchronous operation once it is completed. 
When an asynchronous function is called, it starts executing in the background while the rest of the code continues to run. 
Instead of waiting for the asynchronous operation to complete, the callback function is provided as an argument to the asynchronous function.

Once the asynchronous operation is finished, it invokes the callback function, passing the result or any error that occurred during the operation. 
This allows the code to continue executing without blocking, and the callback function can handle the result or perform additional actions based on the outcome of the asynchronous operation.


--- Sequencing Events - Promises ---

- basic syntax

	new Promise((resolve, reject) => {
		console.log('A')

		//resolve();
		reject();
	})
	.then(() => {
		console.log('B');
	})
	.catch(() => {
		console.log('C');
	})
	
- promises are asynchronous, so during the pending state, the program will continue on from the promise to complete the rest of the program!

- states of a promise

	PROMISE -> PENDING -> SETTLED (RESOLVED .then() / REJECTED .catch() )

- promise chaining

	new Promise((resolve, reject) => {
		alert('A')
		resolve(['B', 'C', 'D']);
		// reject();
	})
	.then((data) => {
		// throw new Error('Error at B');
		alert(data.shift());
		return data;
	})
	.then((data) => {
		throw new Error('Error at C');
		alert(data.shift());
		return data
	})
	.then((data) => {
		// throw new Error('Error at D');
		alert(data.shift());
		return data
	})
	.catch((error) => {
		console.log(error)
		alert(error);
	})

Promise chaining drastically cleans up the syntax of complex asynchronous flows:
less code, better readability, more explicit error handling with catch statements and tighter flow control because of promise states

nested callback chain example

	const mockAPI = (returnValue) => (arg, cb) => {
		setTimeout(() => cb(returnValue), 2000);
	};

	const fetchSession = mockAPI({ id: "123765" });
	const fetchUser = mockAPI({ firstname: "Bob" });
	const fetchUserFavorites = mockAPI([ "lions", "tigers", "bears" ]);

	const runCallbacks = () => {
		fetchSession("session-id", (session) => {
			fetchUser(session, (user) => {
				fetchUserFavorites(user, (favorites) => {
					console.log(favorites);
				});
			});
		});
	};

promise chain example

	const mockAPI = (returnValue) => (arg, cb) => {
		setTimeout(() => cb(returnValue), 2000);
	};

	const fetchSession = mockAPI({ id: "123765" });
	const fetchUser = mockAPI({ firstname: "Bob" });
	const fetchUserFavorites = mockAPI([ "lions", "tigers", "bears" ]);

	const runPromises = () => {
		return fetchSession("session-id")
			.then(session => fetchUser(session))
			.then(user => fetchUserFavorites(user))
			.then(favorites => console.log(favorites))
			.catch(error => console.log("oops!"));
	};

---

callbacks still needed?
	yes, callbacks are a primary way to chain functionality in JavaScript, so you will still see callbacks around all the time
	promises are simply syntactic sugar: a convenient set of key words that do not add anything fundamentally new to the language
	
	 For short and simple asynchronous logic, I think callbacks are still an option. 
	 But I think it is safe to say that callbacks should no longer be used for long, complex, or multi-step asynchronous logic chains.

---

Exercise 1:

	// In this challenge, the promise will resolve with a given data set.
	// Create a promise chain of four steps to do the following

	// Step 1: Return only the unread alerts, if there are none, trigger an error that says there are no unread alerts
	// Step 2: If the alert is a system alert, call the printSystemAlert function on it and remove it from the list
	// Step 3: Create a console.error message for the critical alerts that prints the alert message, if there are no ciritical alerts, do nothing and proceed to step 4
	// Step 4: Console log all other types of alerts with the message, severity, and type properties

	const alerts = [
		{
			type: "system",
			severity: "critical",
			timestamp: "",
			message: "System has experienced an error and must be restarted",
			user_id: null,
			short_code: "VDN877",
			readStatus: true
		},
		{
			type: "users",
			severity: "critical",
			timestamp: "",
			message: "Unauthorized access to the system has been logged",
			user_id: null,
			short_code: "VDN077",
			readStatus: false
		},
		{
			type: "system",
			severity: "informational",
			timestamp: "",
			message: "There are new updates available",
			user_id: null,
			short_code: "VDN827",
			readStatus: false
		},
		{
			type: "users",
			severity: "warning",
			timestamp: "",
			message: "Some users on this system have not updated their passwords",
			user_id: null,
			short_code: "HDN877",
			readStatus: false
		}
	]

	const printSystemAlert = (alert) => {
		console.info(alert, `This is a ${alert.severity} system wide alert: ${alert.message}`)
	}

	new Promise((resolve, reject) => {
		resolve(alerts)
	})
	.then(data => {
		const unread = data.filter(d => d.readStatus === false);
	   
		if (unread.length === 0) {
			throw new Error('There are no unread alerts');
		}
		return unread;
	})
	// you can name this whatever you want, so make it descriptive!
	.then(unreadAlerts => {
		// might be tempted to save this into a variable, but you don't have to
		return unreadAlerts.filter(alert => {
			if(alert.type === "system") {
				printSystemAlert(alert)
			} else {
				return true
			}
		})
	})
	.then(filteredAlerts => filteredAlerts.map(alert => {
		if(alert.severity === "critical") {
			console.error(alert.message)
		} else {
			console.log(`${alert.severity} ${alert.type} alert: ${alert.message}`)
		}
	}))

Exercise 2:

	// Something is wrong with this promise chain!

	// This promise chain catch clause always runs. Figure out why and get the console.log at the last then clause to run.
	const setCategory = (category, id) => {
		// imagine we are assiging a category to an item...
		console.log("Category assigned!")
	}
	const data = {
		id: "KDF8D903N",
		intVal: 855,
		message: "This is a message",
		sourceId: "NotNull"
	}

	new Promise((resolve, reject) => {
		resolve(data)
	})
	.then(data => {
		// Spelling matters! 
		// But just as an extra, watch out for this other potential problem in JavaScript
		// if (data.soucreId !== null) {
		if (data.sourceId && data.sourceId !== null) {
			return data;
		}
		// when the if statement returns something, there is no need for an else statement
		throw new Error('No source was defined');
	})
	.then(data => {
		const { intVal } = data
		if (intVal > 0 && intVal !== null) {
			const category = data.intVal.toString().split()[0];
			setCategory(category, data.id);
			return data;
		} else {
			throw new Error('No integer value was provided');
		}
	})
	.then(data => console.log(data.id, data.message))
	.catch((error) => {
		console.log(error)
	})

---

FETCH API
	making calls to external resources
	previously other options were used e.g. AJAX requests / jQuery
	
	creates request to resource inside of new promise
	
	fetch lead to other options e.g. axios (built with rest API in mind)	
	
	GET (default option)
	
		fetch('http://localhost:3000')
		.then(response => response.json())
		.then(response => console.log(response))
		.catch(error => console.log(error))
	
	POST/PUT/PATCH/DELETE
	
		// Create a POST request to http://localhost:3000
		const postData = { name: "Alyssa" }
		fetch('http://localhost:3000', {
			method: 'POST', 
			mode: 'cors', 
			headers: {
				'Content-Type': 'application/json'
			},
			body: JSON.stringify(postData)
		})
		.then(response => response.json())
		.then(response => console.log(response))
		.catch(error => console.log(error))


		// Create a PUT request to http://localhost:3000
		const putData = { name: "Alyssa" }
		fetch('http://localhost:3000', {
			method: 'PUT',
			mode: 'cors',
			headers: {
				'Content-Type': 'application/json'
			},
			body: JSON.stringify(putData)
		})
		.then(response => response.json())
		.then(response => console.log(response))
		.catch(error => console.log(error))


		// Create a DELETE request to http://localhost:3000

		const deleteData = { name: "Alyssa" }
		fetch('http://localhost:3000', {
			method: 'DELETE',
			mode: 'cors',
			headers: {
				'Content-Type': 'application/json'
			},
			body: JSON.stringify(deleteData)
		})
		.then(response => response.json())
		.then(response => console.log(response))
		.catch(error => console.log(error))

---

Promises best practices and error handling

	if you find yourself declaring a function inside a clause - you might want to move the declaration outside the promise
	if you can identify two distinct things happening in a clause, break it into two clauses
	always use a catch clause!!!

	better error handling -> by writing then clauses off of the catch clause
	
		function fetchData() {
		  return new Promise((resolve, reject) => {
			// Simulating an asynchronous operation
			setTimeout(() => {
			  const randomNum = Math.random();
			  if (randomNum < 0.5) {
				resolve('Data fetched successfully');
			  } else {
				reject('Error: Failed to fetch data');
			  }
			}, 2000);
		  });
		}

		fetchData()
		  .then((data) => {
			console.log(data);
			// Simulating an error in the promise chain
			throw new Error('Error: Something went wrong');
		  })
		  .catch((error) => {
			console.log(error);
			// Handling the error and continuing the promise chain
			return 'Error handled, but still continuing';
		  })
		  .then((message) => {
			console.log(message);
			console.log('Promise chain continued after error handling');
		  });	
			
---

Promise chaining across function calls

	example:
	
		const genericAPIrequest = () => {
		   return new Promise((resolve, reject) => {
				resolve({body: "My test data"})
			})
		}

		genericAPIrequest().then(data => {
			console.log(data);
		}).catch(error => console.log(error));	

don't forget the return - a then statement passes information to the next then in the chain by returning a value

automatic return rule

	new Promise((resolve, reject) => {
		resolve("This is a message");
	})
	.then(data => data.split(" "))
	.then(data => data[0])
	.then(data => console.log(data))
	.catch(err => console.error(err));

extended function, now must use return:

	new Promise((resolve, reject) => {
		resolve("This is a message");
	})
	.then(data => {
	  // do some more logic
	  return data.split(" ")
	})
	.then(data => data[0])
	.then(data => console.log(data))
	.catch(err => console.error(err));

---

Exercise:

	const eventMessage = JSON.stringify({body: "Your account has been updated!"});
	const currentUser = JSON.stringify({
		name: "Ralph S. Mouse",
		id: "238jflK3"
	});

	const getUserInformation = () => {
		return new Promise((resolve, reject) => {
			setTimeout(resolve, 2000, currentUser);
		}).then(data => JSON.parse(data))
	};

	const getEventMesssage = () => {
		return new Promise((resolve, reject) => {
			setTimeout(resolve, 2000, eventMessage);
		}).then(data => JSON.parse(data))
	};

	getUserInformation().then(userInfo => {
		getEventMesssage()
		.then(message => message.body)
		.then(message => {
			const greeting = `Thank you, ${userInfo.name}.`
			console.log(`${greeting} ${message}`)
		})
	}).catch(err => console.log(err));

---

Promise Methods

	New Promise
	initiates a new project
	from here you can resolve or reject the new Promise you have made

	Promise.reject
	called in a Promise, will cause the .catch clause to run in the same way an error does

	Promise.resolve
	called in a Promise, will cause the .then clause to run
	optionally can be passed an argument that will go to the next statement

	Promise.finally
	like .then or .catch, finally is another clause that runs after the other clauses
	it runs in both a reject or resolve case

---

Working with multiple promises: 

Promise.allSettled:

	Promise.allSettled takes an argument that is an array of Promises
	waits for all Promises to resolve and collects the results of each one into a new array of results
	resulting array contains one object per Promise, saying resolved/rejected, along with the value (if it resolved) or the reason for failure (if it rejected)

	Promise.all itself returns a Promise, so the resulting array is available in the following .then statement	

	Example:

		const book1 = new Promise((resolve, reject) => {
			setTimeout(resolve, 3000, "Enders Game");
		});

		const book2 = new Promise((resolve, reject) => {
			setTimeout(reject, 4000, "Sorry, not available!");
		});

		const book3 = new Promise((resolve, reject) => {
			setTimeout(resolve, 2000, "Harry Potter and The Prisoner of Azkaban");
		});

		const book4 = new Promise((resolve, reject) => {
			setTimeout(resolve, 1000, "Stranger in a Strange Land");
		});

		Promise.allSettled([book1, book2, book3, book4])
		.then(results => {
			console.log(results)
			results.forEach(result => console.log(result.value))
		})
		.catch(error => console.log(error));
		
Promise.all:

	almost exactly the same time as Promise.allSettled except for what it returns and how it handles rejected Promises
	takes in an array of Promises and waits for them to resolve, but the first time it encounters a rejected Promise, it stops waiting for any further Promises and runs its catch clause
	if no Promises reject, it returns an array of the values returned by them
	again like Promise.allSettled, Promise.all returns a Promise, so the resulting array is available in the following then

	Example:
	
		const book1 = new Promise((resolve, reject) => {
			setTimeout(resolve, 3000, "Enders Game");
		});

		const book2 = new Promise((resolve, reject) => {
			setTimeout(reject, 4000, "Sorry, not available!");
		});

		const book3 = new Promise((resolve, reject) => {
			setTimeout(resolve, 2000, "Harry Potter and The Prisoner of Azkaban");
		});

		const book4 = new Promise((resolve, reject) => {
			setTimeout(resolve, 1000, "Stranger in a Strange Land");
		});

		Promise.all([book1, book2, book3, book4])
		.then(results => {
			console.log(results);
			results.forEach(result => console.log(result.value));
		})
		.catch(error => console.log(error));	
	
Promise.race:

	also takes an argument of an array of Promises, but instead of waiting for them all to resolve, it only waits for the fastest one
	whatever Promise fulfills first, whether is resolves or rejects
	will pass the value from the resolution or the error from the rejection to its then statement
	
	Example:
	
		const book1 = new Promise((resolve, reject) => {
			setTimeout(resolve, 3000, "Enders Game");
		});

		const book2 = new Promise((resolve, reject) => {
			setTimeout(reject, 4000, "Sorry, not available!");
		});

		const book3 = new Promise((resolve, reject) => {
			setTimeout(resolve, 2000, "Harry Potter and The Prisoner of Azkaban");
		});

		const book4 = new Promise((resolve, reject) => {
			setTimeout(reject, 1000, "Sorry, not available!");
		});

		Promise.race([book1, book2, book3, book4])
		.then(result => {
			console.log(result);
		})
		.catch(error => console.log("Error!", error));
	
---

Exercises:

	function randomNum(min, max) {
		return Math.floor(Math.random() * (max - min + 1) ) + min;
	}
	function randomReturn(resolve, reject){
		return Math.random()*10 > 5 ? resolve : reject;
	}
	const p1 = new Promise((resolve, reject) => {
		setTimeout(randomReturn(resolve, reject), randomNum(500, 4000), "A");
	});
	const p2 = new Promise((resolve, reject) => {
		setTimeout(randomReturn(resolve, reject), randomNum(500, 4000), "B");
	});
	const p3 = new Promise((resolve, reject) => {
		setTimeout(randomReturn(resolve, reject), randomNum(500, 4000), "C");
	});
	const p4 = new Promise((resolve, reject) => {
		setTimeout(randomReturn(resolve, reject), randomNum(500, 4000), "D");
	});
	// Above are a bunch of Promises that will either resolve or reject randomly, and fulfill 
	// in a random amount of time between half a second and 4 seconds.

	// Challenge 1
	// Implement the method to get a list of results of all the promises and console log how many failed and how many rejected
	Promise.allSettled([p1, p2, p3, p4])
	.then(results => {
		console.log(results);
		const failed = results.filter(result => result.status === "fulfilled");
		console.log(`Failed: ${failed.length} ::: Fulfilled: ${results.length - failed.length}`);
	})
	.catch(error => console.log(error));

	// Challenge 2
	// Implement the method to get a list of results from all the Promises unless one fails. Log the list of successful results or the error message if one fails.
	Promise.all([p1, p2, p3, p4])
	.then(results => {
		console.log(results);
	})
	.catch(error => console.log(error));

	// Challenge 3
	// Implement the method to figure out which Promise fulfilled first, print the message it fulfills with.
	Promise.race([p1, p2, p3, p4])
	.then(result => {
		console.log(result);
	})
	.catch(error => console.log("Error!", error));
	
---

--- Sequencing Events - Async / Await ---

Try/Catch blocks are the vanilla JavaScript syntax for exception handling
(writing code in such a way as to allow programs to handle errors without crashing or becoming unusable)

	try {
	   // undeclared variable being used in an operation causes an error
	   foo/2
	} catch (err) {
	   console.error(err.message);
	} finally {
	   console.log('I run last');
	}

Exercises:

	const printStatusMessage = (status) => {
		try {
			const animalsList = animalsByConservationStatus(status);
			let names = animalsList.map(animal => animal.common_name);
			message = `Animals listed as ${status} are: ${names.join(', ')}`;
			console.log(message);
		} catch(error) {
			console.error(error);
			console.log(`There are no animals with status: ${status}`);
		};
	};

	printStatusMessage("critical");
	printStatusMessage("extinct");

	---

	endangeredAnimals = ["saola", "green turtle", "amur leopard", "deer"];

	const printAnimalMessage = (animal) => {
		try {
			const info = fetchAnimalByName(animal);
			const message = `The ${info.common_name} is ${info.conservation_status} on the endangered list`;
			console.log(message);
		} catch(error) {
			console.error(`There was a problem fetching: ${animal}`);
		};
	};

	endangeredAnimals.forEach(animal => printAnimalMessage(animal));

	---

	animal1 = "vaquita";
	animal2 = "mouse";

	const printAnimalFacts = (animal) => {
		try {
			const info = fetchAnimalByName(animal);
			const message = `The ${info.common_name} (${info.species}) is an endangered animal with ${info.population !== null ? info.population : "an unkown number of"} individuals in the wild in their home region of ${info.region}`;
			console.log(message);
		} catch(error) {
			console.error(error)
		} finally {
			console.log(`The ${animal} was searched.`)
		}
	};

	printAnimalFacts(animal1);
	printAnimalFacts(animal2);

---

The Purpose of Async/Await

When you need to do operations that involve the results of more than one Promise, it is difficult to make that operation wait to run until all the Promises have resolved and the values are ready.

Async/await helps us get around this difficulty by giving us the power to turn Promises into blocking operations when we want to.

Syntax:

	const promise1 = () => new Promise((resolve, reject) => {
	   setTimeout(resolve, 3000, 100);
	});

	async function exampleAsync() {
	   const value1 = await promise1();
	   console.log("waited for the value to be ready", value1);

	   return value1;
	}

	exampleAsync();

	note: we are still using promises, we use the keywords async + await

async goes before a function declaration and allows us to use the await keyword in that scope. It also forces that function to return a promise

await can be put before a Promise call to make the program treat it as a blocking operation

Async/Await gives us the ability to make our program wait for certain values we need so that they are available in the next step. This can make timing much easier.

Example - Promises vs Async/Await:

	with Promises:

	const mockAPI = (returnValue) => (arg, cb) => {
		setTimeout(() => cb(returnValue), 2000);
	};

	const fetchSession = mockAPI({ id: "123765" });
	const fetchUser = mockAPI({ firstname: "Bob" });
	const fetchUserFavorites = mockAPI([ "lions", "tigers", "bears" ]);

	const runPromises = () => {
		return fetchSession("session-id")
			.then(session => fetchUser(session))
			.then(user => fetchUserFavorites(user))
			.then(favorites => console.log(favorites))
			.catch(error => console.log("oops!"));
	};

	with Async/Await:

	const mockAPI = (returnValue) => (arg, cb) => {
		setTimeout(() => cb(returnValue), 2000);
	};

	const fetchSession = mockAPI({ id: "123765" });
	const fetchUser = mockAPI({ firstname: "Bob" });
	const fetchUserFavorites = mockAPI([ "lions", "tigers", "bears" ]);

	const runAsync = async () => {
		try {
			const session = await fetchSession("session-id");
			const user = await fetchUser(session);
			const favorites = await fetchUserFavorites(user);
			console.log(favorites);
		} catch (error) {
			console.log("oops!");
		}
	}

---

Challenge:

	// Here is an example with Promises where we need to wait for both responses before performing an action

	const promise1 = () => new Promise((resolve, reject) => {
		setTimeout(resolve, 1000, 19);
	});
	const promise2 = () => new Promise((resolve, reject) => {
		setTimeout(resolve, 3000, 23);
	});

	// Challenge 1
	// Try using JUST Promise syntax to sum the results of both Promises and console log the message below
	// "The answer to life, the universe, and everything is: 42"
	// REMINDER: If you want to use Promise.allSettled in your answer, you will need to run the following command in your terminal window first:
	// source  update_node.sh

	Promise.allSettled([promise1(), promise2()])
	.then(results => {
		summed = parseInt(results[0].value) + parseInt(results[1].value);
		console.log("The answer to life, the universe, and everything is: " + summed);
	})
	.catch(error => console.log(error));

	// ---------------------------------------------------------------------------
	// Challenge 2
	// Now try the same example, but instead of implementing it with Promises, use Async/await
	// Console log: "The answer to life, the universe, and everything is: 42"
	// your async/await code here

	const runAsync = async () => {
		try {
			const first = await promise1();
			const second = await promise2();
			console.log(`The answer to life, the universe, and everything is: ${first + second}`)
		} catch (error) {
			console.log("oops!");
		}
	}
	runAsync();

---

Error Handling with Async/Await

Example using Try/Catch (more common):

	const promise1 = () => new Promise((resolve, reject) => {
		setTimeout(resolve, 3000, 5);
	});

	const promise2 = () => new Promise((resolve, reject) => {
		setTimeout(reject, 3000, "Could not get value");
	});

	async function handleManyThings() {
		try {
			const value1 = await promise1();
			console.log("waiting on first promise", value1);

			const value2 = await promise2();
			console.log("waiting on second promise", value2);

			console.log("Solution:", value1 + value2);
			return value1 + value2;
		} catch(error) {
			console.log(error)
		}
	}

	handleManyThings();

Example using Promise Catch

	const promise1 = () => new Promise((resolve, reject) => {
		setTimeout(resolve, 3000, 5);
	});

	const promise2 = () => new Promise((resolve, reject) => {
		setTimeout(reject, 3000, "Could not get value");
	});

	async function handleManyThings() {
		const value1 = await promise1();
		console.log("waiting on first promise", value1);

		const value2 = await promise2();
		console.log("waiting on second promise", value2);

		console.log("Solution:", value1 + value2);
		return value1 + value2;
	}

	handleManyThings().catch(err => console.log(err));

---

When (and When Not) to Use Async/Await

You should use Async/Await when:
	The results from multiple Promises will be used together.
	You need perform a lot of logic after one or multiple Promises resolve
	Logic in a synchronous-style function would be cleaner than in a .then chain (this is mostly personal preference)

You shouldn't use Async/Await if:
	You don't need to use the await word in the function
	You just want the function to return a promise (instead use Promise.new from the promises lesson)

Think carefully about using Async/Await because:
	It will change the output of the function. If other parts of the program rely on the output of that function, changing it to async will have unexpected consequences

---

Challenge 1

	const printStatusMessage = async (status) => {
		try {
			const animalsList = await animalsByConservationStatus(status);
			console.log(animalsList)
			message = `Animals listed as ${status} are: ${animalsList.join(', ')}`;
			console.log(message);
		} catch(error) {
			console.error(error);
			console.log(`There are no animals with status: ${status}`)
		}
	}

	printStatusMessage("critical");
	printStatusMessage("extinct");

Challenge 2

	endangeredAnimals = ["saola", "green turtle", "amur leopard", "deer"];

	const printAnimalMessage = async (animal) => {
		try {
			const info = await fetchAnimalByName(animal);
			const message = `The ${info.common_name} is ${info.conservation_status} on the endangered list`;
			console.log(message);
		} catch(error) {
			console.error(`There was a problem fetching: ${animal}`)
		};
	};

	endangeredAnimals.forEach(animal => printAnimalMessage(animal));

Challenge 3

	animal1 = "vaquita";
	animal2 = "mouse";

	const printAnimalFacts = async (animal) => {
		try {
			const data = await fetchAnimalByName(animal);
			const message = `The ${data.common_name} (${data.species}) is an endangered animal with ${data.population !== null ? data.population : "an unkown number of"} individuals in the wild in their home region of ${data.region}`;
			console.log(message);
		} catch(error) {
			console.error(error)
		} finally {
			console.log(`The ${animal} was searched.`)
		}
	};

	printAnimalFacts(animal1);
	printAnimalFacts(animal2);

Challenge 4 

	const printAnimalRegions = async (status) => {
		try {
			const animalsList = await animalsByConservationStatus(status);
			const getAnimals = animalsList.map((animal) => {
				return fetchAnimalByName(animal).catch(err => console.log(err));
			});
		
			const regions = await Promise.allSettled(getAnimals)
			.then(results => {
				const regions = results.map(result => result.value.region);
				return regions;
			})
			.catch(error => console.log(error));
		
			const message = `Animals with an endangered status of ${status} can be found in the following regions: ${regions.join(', ')}`;
			
			console.log(message);
		} catch(error) {
			console.log(error);
		} finally {
			console.log(`Search complete for regions with animals of status: ${status}`);
		};
	};

	printAnimalRegions("critical");
	printAnimalRegions("threatened");

---

Two types of async syntax:

	// arrow function example
	const myAsyncFunction = async ( ) => {
	  // ...
	};

	// named function example
	async function myAsyncFunction() {
	  // ...
	};

---
